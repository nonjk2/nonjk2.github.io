---
layout: post
title: "페이지네이션 with Study"
category: frontend
description: >
  페이지네이션을 구현하자
image:
  path: /assets/img/frontend/react/pageNation.png
tags: 기능구현
permalink: frontend/react/pageNation
---


# 리액트 기능구현 스터디 <pagenation>
{:.no_toc}


* this list will be replaced by the toc
{:toc}

리액트의 폼을 끌어올리기위해 웹,앱을 제작할때 알면좋은 , 배우기 좋은 기능들을 연습해보자 생각하다가 페이지네이션을 공부하기로 맘먹었다.

<!--more-->

혼자 스터디를 하기 적적해서 스터디를 같이할 사람들을 끌어모았고 반응이 생각보다 좋았다.
사람이 모인김에 혼자할때와는 다른 방식으로 할겸 같은 input 에 다른 output이 나오길 기대하며 여러가지 조건들을 추가했다.

[조건](https://github.com/nonjk2/ReactStudy/blob/main/%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98/README.md)들을 정리해보면

1. 같은 데이터 (OpenAPI)
2. 같은 폼 (디자인)
3. 시간 제한 - 5시간 페이지 네이션 완료

으로 시작해 다같은 시간에 바로 시작했다.

## 페이지네이션

일단 페이지네이션이란 검색 결과를 가져올때 데이터를 일정 숫자만큼 나눠서 일부만 가져오는 기법 이라고 한다. 보통 백엔드에서도 API를 보낼때에 page번호와 갯수를 따로 요청한다.

그럼 프론트엔드에선 페이지 번호와 알맞게 필요한 데이터만큼 요청을해서 가져오면 된다.

백엔드의 페이지네이션에는 두가지 방법이있는데 , 각각 `Offset-based 페이징` ,`Cursor-based 페이징` 이라고 한다 offest-base 페이징 같은 경우

간단히 설명하면 `Offset-based 페이징` 같은경우 페이지번호와 페이지당 개수를 요청받아
db의 저장된 순서대로 1~50 51 ~100 이렇게 가져오는 방법이다
제일 기본적인 방법이고 만약에 새게시물이나 상품같은 새 데이터가 추가되면 데이터 베이스의 번호 순서가 바뀌어 요즘 방식과는 잘 안맞아 묻힌 방식이다.

`Cursor-based 페이징` 같은 경우에는 처음 50개를 가져오면 마지막번호나 모든 정보에 고유아이디를 넘겨서 받는다. 요청param에 cursor를 넘겨 그 이후부터 받는 방법이다. 요즘은 인피니티 스크롤이라던가 다른 많은 페이징 기법때문에 이방법을 매우 선호한다.

우리는 하지만 고정된 10000개의 데이터를 핸들링하기때문에 `Offset-based 페이징` 방법으로 했다. ~~openAPI ㅈㄴ 찾기힘듬~~

## 힘들었던상황

**첫번째**로 이미지 로딩속도가 있겠다. 안그래도 이미지를 받아오는데 시간이 많이 걸렸는데 이미지 크기가 크고 , gif도 있어서 한페이지당 이미지를 다로드하는데에 시간이 걸렸다 (이래서 Next 넥스트 하나부다)

암튼 전페이지로가면 캐시된(아무 옵션이 없으면 브라우저 캐시정책으로 보통 30일동안 캐시됨) 이미지덕분에 엄청 빨리 로드되지만 처음가본 페이지에 가면 fetch와 이미지 로드속도가 많이걸렸다

### 이미지 그나마 개선

음 이러한 상황들을 어떻게 할까 고민하다가 급한 한국인의 마음으로 사용자의 입장에서 생각을 한번해보고 개선하였다 fetch할때 로딩 한번주고 , 이미지를 불러올때 로딩을 한번 더주고 눈에 보이는 상황이라면 그나마 급한 한국인들의 마음을 달래주지않을까 싶어
이런형식으로 나타내었다.

```jsx
/// 이미지 로드
const [load, setLoad] = useState(true);
const handleImageLoad = () => {
  setLoad(false);
};
<div className="img_div">
  {load && <div className="loading-overlay">로딩 중...</div>}
  <img src={url} alt="" onLoad={handleImageLoad} />
</div>;
```

이미지로드는 각각의 이미지 로드를 통해 시각적인 답답함을 해소해주었다.
그리고 [usePageNation](https://github.com/nonjk2/ReactStudy/blob/main/pageNation/src/hooks/usePageNation.js)을 통해 가져온 loading 으로 관리를 해주었다.

```jsx
<CatListSection>
  {loading ? (
    <Spinner>
      <div className="loading_spinner_box">
        <div className="loading_spinner" />
      </div>
    </Spinner>
  ) : (
    cats &&
    cats.map((e) => <CatListItem key={e.id} item={{ ...e, toggle: toggle }} />)
  )}
</CatListSection>
```

두번째로는 새로고침이다 페이지네이션같은경우 예를들어 5페이지를 갔을때 5페이지 그대로 페이지가 이동된채로 새로고침이 되어있어야하는데 내가 짯던 코드는 새로고침을 했을때에는 1페이지 초기화면으로 페이지가 리다이렉트 되었다.

### 새로고침 개선

그래서 선택했던 방법이 라우팅이다

```jsx
<Routes>
  <Route path="/" element={<Layout />}>
    <Route path="/:page" element={<CatList />} />
    <Route index element={<CatList />} />
  </Route>
</Routes>
```

```jsx
const navigate = useNavigate();

const handleNextPageGroup = () => {
  const nextPageGroupStart = currentPageGroup * 5 + 1;
  navigate(`/${nextPageGroupStart}`);
};

const handlePrevPageGroup = () => {
  const prevPageGroupStart = (currentPageGroup - 1) * 5;
  navigate(`/${prevPageGroupStart}`);
};
///elements
{
  pageNumbers.map((pageNumber) => {
    if (pageNumber > TotalPagesPerPage) {
      return null;
    }
    return (
      <div className="pageLinkNumberCont" key={pageNumber}>
        <Link to={`/${pageNumber}`}>
          <span
            style={{
              color: pageNumber === page ? "#EE85E8" : "#fff",
            }}
          >
            {pageNumber}
          </span>
        </Link>
      </div>
    );
  });
}
```

다이나믹 라우팅을 활용하여서 페이지 번호를 파람으로 넘기고
버튼을 누르면 링크를 통해 페이지 번호가 넘어가게 했다
다음 이전 버튼은 페이지 그룹 State 를 넘겼다.

`npm run dev`를 통해 로컬에서 확인했을때 새로고침이 무난히 잘 실행 되었는데 여기서 문제가 하나 더 발생했다 vercel에 배포를 하였을때 새로고침을하면 **404 not found**가 떳다.

무슨일인지 한참을 알아보다가 SPA에서는 모든 경로가 동일한 HTML 파일을 가리키지만 새로고침이나 직접 URL입력 등을 통해 서버에 요청이가면 해당 경로의 파일을 찾지 못한단다,,,

이걸 해결하기위해선 서버 설정을 하나의 HTML파일을 바라보게하면 된단다.

바로 vercel.json

```json
{
  "routes": [
    { "handle": "filesystem" },
    {
      "src": "/.*",
      "dest": "/index.html"
    }
  ]
}
```

을 root에 만들고 바로 배포를 하니 새로고침을해도 404를 바라보지않는다 ㅎㅎ

## 개선사항

다음은 개선해야될 부분이다. 추가를 하려고하니 시간이 부족하고 이것만하자니 할게 너무많아 천천히 하나하나 해볼생각이다.

1. 드롭다운으로 limit 설정
2. 스타일링 grid 좀더 디테일하게
3. 이미지 리사이징 작은크기를 받기
4. Nextjs 13v 으로 마이그레이션하기

### 코드리뷰

매니저님이 친히 코드리뷰를 해주셨는데 좋은 피드백을 엄청 쉽게쉽게 많이 받을수있었다.

- 네트워크탭 자세히 보는법
  - 네트워크탭 요청을 보면 html과 요청과 응답 헤더 등을 많은걸 보고 미리 확인가능
- 스타일링 디테일 (grid , list , animation 등)
  - 몇달전만해도 신입의 기준이 NEXTjs , TS 였지만 이제는 스타일링도 거의 기준이 되어간단다. ~~토스,,,,내가 뭘 잘못했습니까~~
- limit 설정
  - limit을 설정할수있게 드롭다운 바나 등등으로 많이 불러올수 있게 설정하면 좋겠다. 라는 피드백을 주셨다.
- 시간이없어 코드의 피드백은 받지 못했지만 그저 간단한 기능인만큼 기획적인면 기능적인 면에서의 피드백을 들을 수 있어 좋았다.

배포중 - [페이지네이션](https://react-study-nu.vercel.app)
