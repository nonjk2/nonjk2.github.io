---
layout: post
title: "함수"
category: frontend
description: >
  함수에 대하여
image:
  path: /assets/img/frontend/ES6.png
tags: JavaScript TIL
---
<!--more-->
# **일급 객체로서의 함수**
{:.no_toc}

* this list will be replaced by the toc
{:toc .large-only}
---

자바스크립트에서 함수는 일급 객체(First-Class Object). 그래서 함수를 객체처럼 여러가지 방식으로 다룰 수 있다.

> **일급객체(First-class Object)란 다른 객체들에 일반적으로 적용 가능한 연산을 모두 지원하는 객체를 가리킨다. [위키백과]**

함수가 일급 객체로 취급되기 때문에, 함수를 매우 유연하게 사용할 수 있다.

### 변수를 함수를 할당

- 함수는 변수에 할당할 수 있다. 함수는 값으로 함수는 값으로 취급되기 때문에, 다른 변수와 마찬가지로 변수에 할당할 수 있다. 변수에 할당된 함수는 나중에 사용할 수 있다.

  ```jsx
  const sayHello = function () {
    console.log("Hello!");
  };

  sayHello(); // "Hello!" 출력
  ```

### 함수를 인자로 다른 함수에 전달

- 함수는 다른 함수에 인자로 전달될 수 있다. 함수가 값으로 취급되기 때문에, 다른 함수의 인자로 전달할 수 있다. 이것은 **콜백(callback)**이나 **고차 함수(higher-order function)**를 작성하는 데 사용

  - 고차 함수란 함수를 인자로 받거나 함수를 출력으로 반환하는 함수를 말한다. 함수를 다루는 함수인셈 정리하면 콜백함수는 고차함수라고도 할 수 있다.

  ```jsx
  function callFunction(func) {
    func();
  }

  const sayHello = function () {
    console.log("Hello!");
  };

  callFunction(sayHello); // "Hello!" 출력
  ```

### 함수를 반환

- 함수는 다른 함수에서 반환 될수 있다. 함수는 값으로 취급되기 때문에, 다른 함수에서 반환할 수 있다. 이것은 함수 팩토리 (factory) 나 클로저(closure)를 작성하는 데 사용됨.

```jsx
function createAdder(num) {
  return function (x) {
    return x + num;
  };
}

const addFive = createAdder(5);
console.log(addFive(10)); // 15 출력
```

### 객체의 프로퍼티로 함수를 할당

- 함수는 객체의 프로퍼티로 할당 될 수 있다. 객체의 메소드로 함수를 호출 가능

```jsx
const person = {
  name: "John",
  sayHello: function () {
    console.log(`Hello, my name is ${this.name}`);
  },
};

person.sayHello(); // "Hello, my name is John" 출력
```

### 배열의 요소로 함수를 할당

- 함수는 배열의 요소로 할당될 수 있다. 이것은 함수를 배열에서 사용할 수 있게 함.

```jsx
const myArray = [
  function (a, b) {
    return a + b;
  },
  function (a, b) {
    return a - b;
  },
];

console.log(myArray[0](5, 10)); // 15 출력
console.log(myArray[1](10, 5)); // 5 출력
```

- 함수가 일급 객체로 취급되기 때문에, 자바스크립트에서 함수는 매우 유연하게 사용될 수 있다. 이것은 다양한 프로그래밍 패턴에서 사용되며 함수를 일급 객체로 다룰 수 있다는 것은 코드를 더 간결하고 모듈화된 형태로 작성 할 수 있게 해준다.

```jsx
function multiplyBy(num) {
  return function (x) {
    return x * num;
  };
}

function add(x, y) {
  return x + y;
}

const multiplyByTwo = multiplyBy(2);
const multiplyByThree = multiplyBy(3);

const result = add(multiplyByTwo(5), multiplyByThree(10)); // 40 출력
```

# Map 과 Set

---

**JavaScript**에서 **`객체(object)`**와 **`배열(array)`**을 이용하면 굉장히 다양하고 복잡한 프로그래밍을 할 수가 있다. 하지만 여러가지 문제들을 프로그래밍 적으로 반영하기엔 많이 부족하다. 이러한 한계를 극복하고자 비교적 최근 등장한 자료구조인 `Map` `Set`을 알아보자

### (1) Map

Map은 키-쌍을 저장하는 객체와 비슷하다. Map은 각 쌍의 키와 값을 저장하며, 객체와 달리 키로 사용 할 수 있는 모든 유형을 사용할 수 있다. Map은 키가 정렬된 순서로 저장되기 때문에 , 추가한 순서대로 반복할 필요가 없다. Map 을 사용하면 다음과 같은 작업을 수행할 수 있다.

- 키-값 쌍 추가 및 검색(set)
- 키-값 쌍 삭제(delete)
- 모든 키-값 쌍 제거(clear)
- **Map** 크기 및 존재 여부 확인(size)

<aside>
💡 **Map 의 메서드와 프로퍼티**

- `new Map()` – 맵을 만듭니다.
- `map.set(key, value)` – `key`를 이용해 `value`를 저장합니다.
- `map.get(key)` – `key`에 해당하는 값을 반환합니다. `key`가 존재하지 않으면 `undefined`를 반환합니다.
- `map.has(key)` – `key`가 존재하면 `true`, 존재하지 않으면 `false`를 반환합니다.
- `map.delete(key)` – `key`에 해당하는 값을 삭제합니다.
- `map.clear()` – 맵 안의 모든 요소를 제거합니다.
- `map.size` – 요소의 개수를 반환합니다.
</aside>

```jsx
const myMap = new Map(); //Map()생성자를 사용
myMap.set('key', 'value'); //Map에 값을 추가하기위해 set()메서드 사용
console.log(myMap.get('key');//get()메서드를 사용해 'value'출력
```

**Map**에서는 **keys()**, **values()**, **entries()** 메소드를 사용하여 키, 값 및 키-값 쌍을 반복할 수 있다.

<aside>
💡 `for of` 반복문은 ES6에 추가된 새로운 컬렉션 전용 반복 구문. `for of` 구문을 사용하기 위해선 컬렉션 객체가 `[Symbol.iterator]` 속성을 가지고 있어야한다.(직접 명시 가능).

</aside>

```jsx
var iterable = [10,20,30];
for(var valueof iterable){
	console.log(value); // 10, 20 , 30
}
```

`iterable` 은 반복자라는 뜻. 요소 하나하나를 반복할 수 있도록 배열 또는 객체와 비슷한 형태로 열거되어있는 자료구조로 이해하면 된다.

```jsx
const myMap = new Map();
myMap.set("one", 1);
myMap.set("two", 2);
myMap.set("three", 3);

for (const key of myMap.keys()) {
  console.log(key);
}

for (const value of myMap.values()) {
  console.log(value);
}

for (const entry of myMap.entries()) {
  console.log(`${entry[0]}: ${entry[1]}`);
}

console.log(myMap.size); // 3 출력 Map의 크기를 확인
console.log(myMap.has("two")); // true 출력 특정키가 Map에 존재하는지 여부를 확인
```

### (2) Set

JavaScript에서 **`Map`**과 **`Set`**은 두 가지 다른 유형의 자료 구조. **`Map`**은 키-값 쌍을 저장하는 객체와 비슷하며, **`Set`**은 고유한 값을 저장하는 자료 구조다. **`Map`** 및 **`Set`**은 모두 값 추가, 검색, 삭제 및 모든 값 제거를 수행할 수 있다. **`Map`** 및 **`Set`**을 사용하여 효율적인 데이터 구성 및 검색을 수행할 수 있다.

`Set` 은 고유한 값을 저장하는 자료 구조다. `Set` 은 값만 저장하며, 키를 저장하지 않는다. `Set` 은 값이 중복되지 않는 유일한 요소로만 구성된다.

- 값 추가 및 검색
- 값 삭제
- 모든 값 제거
- `Set` 크기 및 존재 여부 확인

```jsx
const mySet = new Set(); //Set() 생성자 사용
mySet.add("value1"); //add()메소드 사용 추가
mySet.add("value2");
mySet.add("value3");
console.log(mySet.has("value1")); // true 출력 has() 메소드 사용

for (const value of mySet.values()) {
  console.log(value);
} // values()메소드를 사용하여 값을 반복

console.log(mySet.size); // 3 출력 크기 확인
```


