---
layout: post
title: styles Library
category: Study
description: >
  스타일 라이브러리 유형과 각 장단점을 알아보았따.
tags: other TIL
permalink: Study/stylesLibrary
---


# 스타일 라이브러리
{:.no_toc}

* this list will be replaced by the toc
{:toc}
<!--more-->
🖌️

## 스타일 라이브러리 유형 특징

알겠습니다. 전처리기, 후처리기, CSS-in-JS의 특징을 "~이다" 체로 다시 작성하겠습니다.

### 1. 전처리기 (Preprocessors):

**특징**:

- CSS를 확장해 프로그래밍적 기능을 추가한 언어이다.
- 변수, 믹스인, 중첩, 함수, 조건문, 반복문 등의 프로그래밍적 기능을 제공한다.
- 웹 브라우저는 전처리기의 문법을 직접 해석할 수 없다. 따라서 전처리기로 작성된 코드는 순수 CSS로 컴파일돼야 한다.
- 대표적인 예로는 Sass(SCSS), Less, Stylus가 있다.

### 2. 후처리기 (Post-processors):

**특징**:

- 이미 작성된 CSS를 대상으로 작동하며, 브라우저 호환성 문제 해결이나 최적화 등의 작업을 수행한다.
- 다양한 플러그인을 통해 CSS를 최적화하거나 추가 기능을 제공한다.
- 최신 CSS 문법을 오래된 브라우저에서도 동작하게 만들 수 있다.
- 대표적인 예로는 PostCSS (autoprefixer, cssnano 등의 플러그인과 함께 사용)가 있다.

### 3. CSS-in-JS:

**특징**:

- JavaScript 내에서 CSS 스타일을 정의하고 적용하는 방식이다.
- 컴포넌트의 로직과 스타일이 함께 있어 관리하기 쉽다.
- 동적으로 스타일을 변경하는 것이 간단하다.
- 스타일의 범위가 컴포넌트에 제한되어 스타일 충돌을 방지할 수 있다.
- 서버 사이드 렌더링과 잘 통합된다.
- 대표적인 예로는 Styled-components, Emotion, JSS가 있다.

## 스타일 라이브러리

| 도구                       | 유형       | 주요 특징                                         |
| -------------------------- | ---------- | ------------------------------------------------- |
| Tailwind CSS               | 프레임워크 | - 유틸리티 기반 스타일링                          |
|                            |            | - 커스터마이징 용이                               |
|                            |            | - PostCSS와 연동                                  |
|                            |            | - 불필요한 스타일 제거 (PurgeCSS 등)              |
| SCSS (Sass)                | 전처리기   | - 변수, 믹스인, 중첩, 함수 등의 프로그래밍적 기능 |
|                            |            | - CSS를 확장한 문법                               |
|                            |            | - 컴파일 과정 필요                                |
| Styled-components          | CSS-in-JS  | - JavaScript 내에서 스타일 정의                   |
|                            |            | - 동적 스타일링 용이                              |
|                            |            | - 컴포넌트 기반 스타일링                          |
| Emotion                    | CSS-in-JS  | - JavaScript 내에서 스타일 정의                   |
|                            |            | - 동적 스타일링 및 테마 적용 용이                 |
|                            |            | - 컴파일 및 최적화 옵션 제공                      |
| PostCSS (예: autoprefixer) | 후처리기   | - 작성된 CSS 변환                                 |
|                            |            | - 브라우저 호환성 자동 적용                       |
|                            |            | - 다양한 플러그인으로 확장 가능                   |

## 스타일 라이브러리 장단점

### 1. SCSS (Sass):

**장점**:

- **프로그래밍적 기능**: SCSS는 변수, 조건문, 반복문, 함수 등의 프로그래밍적 요소를 제공한다. 이로 인해 CSS 코드의 재사용성과 유지 관리성이 크게 향상된다.
- **구조화된 스타일링**: 중첩, 모듈, 믹스인 등을 활용하여 CSS 구조를 더 체계적으로 만들 수 있다.

**단점**:

- **컴파일 필요**: SCSS는 순수 CSS가 아니기 때문에 브라우저에서 해석되기 전에 컴파일 과정이 필요하다. 이로 인해 개발 환경 설정이 복잡해질 수 있다.
- **학습 곡선**: 순수 CSS에 비해 추가적인 문법과 개념을 학습해야 한다.

### 2. Styled-components:

**장점**:

- **컴포넌트 기반 스타일링**: React와 같은 컴포넌트 기반 라이브러리/프레임워크와 자연스럽게 통합된다. 이로 인해 UI와 로직이 밀접하게 연결되어 개발 효율성이 향상된다.
- **동적 스타일링**: JavaScript의 변수와 함수를 활용하여 동적으로 스타일을 변경할 수 있다.

**단점**:

- **네이밍 필요**: 각 스타일링된 컴포넌트에 고유한 이름을 지정해야 하는 추가적인 작업이 필요하다.
- **런타임 오버헤드**: 스타일을 동적으로 생성하고 적용하는 과정에서 런타임에 약간의 부하가 발생할 수 있다.

### 3. Emotion:

**장점**:

- **빠른 런타임 성능**: Emotion은 최적화된 방식으로 동적 스타일을 처리하여 빠른 성능을 제공한다.
- **다양한 스타일링 방식**: 문자열 또는 객체 형태로 스타일을 정의할 수 있어 유연성이 높다.

**단점**:

- **커뮤니티 크기**: Styled-components에 비해 사용자 및 커뮤니티가 상대적으로 작다.

### 4. Tailwind CSS:

**장점**:

- **유틸리티 기반**: HTML에서 직접 클래스를 적용하여 빠르게 UI를 구성할 수 있다. 이로 인해 디자인 시스템을 빠르게 프로토타이핑하고 구축할 수 있다.
- **커스터마이징 용이**: 설정 파일을 통해 디자인 시스템의 기본값을 쉽게 변경할 수 있다.

**단점**:

- **클래스 중복**: HTML이 유틸리티 클래스로 인해 복잡해질 수 있다. 이로 인해 HTML의 가독성이 떨어질 수 있다.
- **학습 곡선**: 유틸리티 기반의 디자인 방식에 익숙하지 않은 사용자에게 초기 학습 곡선이 있을 수 있다.
