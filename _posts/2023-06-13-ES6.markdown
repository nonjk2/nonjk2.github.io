---
layout: post
title: "ES5에서 ES6까지 변경점"
subtitle: "ES6은 어떻게 달라졌을까 짧게 알아보자"
categories: [blog, TIL]
tags: [JavaScript, ES6]
date: 2023-06-13 15:00:00 -0400
background: "/img/posts/06.jpg"
---

<!-- <div style="max-width:800px; margin:0 auto"> -->

> ECMAScript 6 (ES6)는 JavaScript의 버전 중 하나로, 2015년에 발표가 되었다.. ES6는 이전 버전인 ES5에서 새로운 문법과 기능을 도입하여 JavaScript 개발자들이 보다 쉽고 효율적으로 코드를 작성할 수 있도록 개선.

## 목차

1. [let, const](#let--const)
2. [화살표 함수](#화살표함수-arrow-func)
3. [삼항연산자](#삼항-연산자)
4. [구조분해할당](#구조-분해할당)
5. [단축속성명](#단축-속성명property-shorthand)
6. [전개구문](#전개-구문spread)
7. [나머지매개변수](#나머지-매개변수)
8. [템플릿 리터럴](#템플릿-리터럴template-literals)

# ES6란 ?

---

<aside>
💡 ECMAScript 6 (ES6)는 JavaScript의 버전 중 하나로, 2015년에 발표되었다. ES6는 이전 버전인 ES5에서 새로운 문법과 기능을 도입하여 JavaScript 개발자들이 보다 쉽고 효율적으로 코드를 작성할 수 있도록 개선!.

</aside>

**ES6는 ECMAscript를 줄여서 버전숫자를 붙여 쓴것이다**

## ES5와 ES6의 문법개선

---

1. **변수 선언:**
   - ES5: `var` 키워드가 변수 선언에 사용되었다.
   - ES6: `var` 외에 `let` 및 `const` 키워드를 도입.
     - `let`은 재할당할 수 있는 블록 범위 변수에 사용.
     - `const`는 읽기 전용(상수)인 블록 범위 변수에 사용.
2. **함수 구문:**
   - ES5: `function` 키워드를 사용하는 기존 함수 구문.
   - ES6: 보다 간결한 함수 정의를 위해 화살표 함수 구문(`=>`)을 도입.
     - 화살표 함수는 구문이 더 짧고 어휘 `this` 의 렉시컬한 바인딩 → 주변코드와 동일한 `this`값.
3. **템플릿 리터럴:**
   - ES5: `+` 연산자를 사용한 문자열 연결.
   - ES6: 보다 표현력 있는 문자열 보간 및 여러 줄 문자열을 위해 백틱(```)으로 묶인 템플릿 리터럴을 도입.
     - 템플릿 리터럴을 사용하면 표현식 `${expression}`을 문자열에 직접 포함 가능.
4. **객체 리터럴 속기:**
   - ES5: 객체 리터럴을 정의할 때 키와 값이 모두 명시적으로 언급되어야 했다.
   - ES6: 개체 리터럴에 대한 단축 구문을 도입.
     - 키와 값의 이름이 같은 경우 값을 생략할 수 있으며 JavaScript에서 이를 유추.
5. **디스트럭처링 할당:**
   - ES5: 배열이나 객체에서 값을 쉽게 추출하기 위한 내장 구문이 없다
   - ES6: 값의 간결한 추출을 위해 구조 분해 할당 구문을 도입
     - 한 줄의 코드로 값을 별도의 변수로 추출할 수 있다.
6. **기본 기능 매개변수:**
   - ES5: 기본 매개변수 값에 대한 내장 지원이 없다.
   - ES6: 기본 함수 매개변수 값을 도입하여 값이 없거나 '`undefined`'가 전달된 경우 함수 매개변수에 대한 기본값을 제공할 수 있다.

| 기능               | ES5                               | ES6                              |
| ------------------ | --------------------------------- | -------------------------------- |
| 변수 선언          | var                               | let 및 const                     |
| 함수 구문          | 함수 키워드                       | 화살표 함수 구문(=>)             |
| 템플릿 리터럴      | +를 사용한 문자열 연결            | 템플릿 리터럴(`)                 |
| 객체 리터럴        | 속기 구문 없음                    | 키-값 쌍의 속기 구문             |
| 구조 분해 할당     | 기본 제공 지원 없음               | 구조 분해 할당 구문              |
| 기본 함수 매개변수 | 기본 매개변수 값에 대한 지원 없음 | 기본 매개변수 값                 |
| Modules            | 내장 모듈 시스템 없음             | import 및 export 명령문          |
| Classes            | 생성자 함수                       | extends 키워드가 있는 class 구문 |
| 화살표 함수        | 해당 없음                         | 함수 표현식의 간결한 구문        |
| Promises           | 내장 Promise 개체 없음            | 내장 Promise 개체 및 구문        |

## **자세한 내용 정리🥸**

### **let , const**

---

기존에 변수 선언을 위해 존재하던 `var` 를 대체해서 나온 변수 선언에 사용 되는 키워드.

var , const , let의 차이를 알 수 있기 위해서는 선언과 할당의 의미를 아주 정확히 알고있어야함

- 선언 : 변수명을 자바스크립트 엔진에 알리는 것
- 할당: 변수에 값을 저장하는 것(= 할당연산자)

### **화살표함수 (Arrow Func)**

---

`function` 이나 `return` 키워드 없이 함수를 만드는 방법.

```jsx
// ES5
function func() {
	return true
}

//ES6
const func = () => true
const func = () => {
	return true
}

() => {}
parm => {}
(parm1, parm2, ...parms) -> {}

// 익명 화살표 함수
() => {}
```

### **this**

`function` 은 호출을 할 때 `this`가 정해지지만, 화살표 함수는 선언할 때 `this`가 정해진다

### **삼항 연산자**

---

condition ? ture인경우 : false인경우

### 구조 분해할당

---

배열 `[]` 이나 객체 `{}` 의 속성을 분해해서 그 값을 변수에 담을 수 있게 해주는 문법

```jsx
// 배열의 경우
let [value1, value2] = [1, "new"];
console.log(value1); // 1
console.log(value2); // "new"

let arr = ["value1", "value2", "value3"];
let [a, b, c] = arr;
console.log(a, b, c); // value1 value2 value3

// let [a,b,c] = arr; 은 아래와 동일!
// let a = arr[0];
// let b = arr[1];
// let c = arr[2];

let [a, b, c, d] = arr;
console.log(d); // undefined

let [a, b, c, d = 4] = arr;
console.log(d); // 4
//객체의 경우
let user = { name: "nbc", age: 30 };
let { name, age } = user;

// let name = user.name;
// let age = user.age;

console.log(name, age); // nbc 30

// 새로운 이름으로 할당
let { name: newName, age: newAge } = user;
console.log(name, age); // ReferenceError: name is not defined
console.log(newName, newAge); //nbc 30

let { name, age, birthDay } = user;
console.log(birthDay); // undefined

let { name, age, birthDay = "today" } = user;
console.log(birthDay); // today
```

### 단축 속성명(property shorthand)

---

객체의 key와 value 값이 같다면 , 생략 가능

```jsx
const name = "nbc";
const age = "30";

const obj = {
  name,
  age: newAge,
};

const obj = {
  name,
  age,
};
```

### 전개 구문(Spread)

---

배열이나 객체를 전개하는 문법. 구조분해할당과 함께 많이 사용.

```jsx
// 배열
let arr = [1, 2, 3];

let newArr = [...arr, 4];
console.log(newArr); // [1,2,3,4]

// 객체
let user = { name: "nbc", age: 30 };
let user2 = { ...user };

user2.name = "nbc2";

console.log(user.name); // nbc
console.log(user2.name); // nbc2
```

### 나머지 매개변수

---

```jsx
function func(a, b, ...args) {
  console.log(...args);
}

func(1, 2, 3); // 3
func(1, 2, 3, 4, 5, 6, 7); // 3 4 5 6 7
```

### 템플릿 리터럴(Template literals)

---

여러 줄로 이뤄진 문자열과 문자 보간기능을 사용하게 만들어 주는 문자열 리터럴 표현식.

백틱(```) 과 `${}` 로 표현

```jsx
`string text 
string text line2``string text ${value} text`;
```

<!-- </div> -->
